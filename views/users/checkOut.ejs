<%- include('../partials/userpartials/header.ejs') %>



    <link rel="stylesheet" href="css/plugins/pe-icon-7-stroke.css" />
    <link rel="stylesheet" href="css/plugins/font-awesome.min.css" />

    <!-- Plugins CSS -->
    <link rel="stylesheet" href="css/plugins/bootstrap.min.css" />
    <link rel="stylesheet" href="css/plugins/animate.min.css" />
    <link rel="stylesheet" href="css/plugins/swiper-bundle.min.css" />
    <link rel="stylesheet" href="css/plugins/odometer.min.css" />
    <link rel="stylesheet" href="css/plugins/select2.min.css" />
    <link rel="stylesheet" href="css/plugins/ion.rangeSlider.min.css" />

    <link rel="stylesheet" href="css/style.min.css">
    <style>

        .order__title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }
        
        .checkout__input__checkbox {
            position: relative;
            padding-left: 35px;
            margin-bottom: 20px;
            cursor: pointer;
            font-size: 1rem;
        }
        
        .checkout__input__checkbox input[type="radio"] {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }
        
        .checkout__input__checkbox .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 20px;
            width: 20px;
            background-color: #eee;
            border: 2px solid #ccc;
            border-radius: 2px; /* Square corners */
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }
        
        .checkout__input__checkbox input[type="radio"]:checked ~ .checkmark {
            background-color: #f8f1d1; /* Light golden background */
            border-color: #b59100; /* Golden border */
        }
        
        .checkout__input__checkbox .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }
        
        .checkout__input__checkbox input[type="radio"]:checked ~ .checkmark:after {
            display: block;
        }
        
        .checkout__input__checkbox .checkmark:after {
            left: 6px;
            top: 2px;
            width: 6px;
            height: 12px;
            border: solid #b59100; /* Golden tick mark */
            border-width: 0 3px 3px 0;
            transform: rotate(45deg);
        }
        

        .checkout-shipping {
            display: none;
        }

        .address-cards {
            display: flex;
            justify-content: space-around;
            margin-top: 1.25rem; 
        }

        .card {
            border: 1px solid #ccc;
            border-radius: 0.8rem; 
            padding: 1rem;
            text-align: center;
            width: 20rem; 
            cursor: pointer;
            transition: transform 0.2s;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .card h3 {
            margin: 0 0 0.625rem 0; 
        }

        .card p {
            margin: 0.3125rem 0; 
        }

        .select-button {
            background-color: #007bff;
            border: none;
            color: white;
            padding: 0.625rem 1.25rem; 
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 1rem;
            margin: 0.625rem 0; 
            border-radius: 0.3125rem; 
            cursor: pointer;
        }

        .select-button:hover {
            background-color: #0056b3;
        }


        .modal-dialog.modal-md {
            max-width: 31.25rem; 
            margin: 5rem auto;
        }

        .modal-content {
            border-radius: 0.625rem; 
        }

        .modal-header {
            border-bottom: none;
            padding: 1rem 1rem; 
        }

        .modal-title {
            font-weight: bold;
        }

        .coupon-list {
            margin-top: 0.625rem; 
        }

        .coupon-card {
            border: 1px dashed #ed9b30;
            padding: 0.625rem; 
            margin-bottom: 0.625rem; 
            border-radius: 0.5rem;
        }

        .coupon-header {
            display: flex;
            align-items: center;
        }

        .coupon-checkbox {
            margin-right: 0.625rem;
        }

        .coupon-code {
            font-size: 1.125rem;
            font-weight: bold;
            color: #dd9e4c;
            cursor: pointer;
            border: 1px dashed #ed9b30;
            padding: 0.3125rem 0.625rem; 
            border-radius: 0.3125rem; 
        }

        .coupon-details {
            margin-top: 0.3125rem; 
            font-size: 0.875rem;
            color: #555;
        }

        .savings-info p {
            margin: 0;
            font-size: 0.875rem; 
            color: #333;
        }

        .checkout-order .table tbody tr td.Product-price {
            text-align: center;
        }

        .checkout-order .table thead tr th.Product-price {
            text-align: center;
        }
  
        #total-saved {
            color: rgba(0, 128, 0, 0.78);
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            padding-top: 4rem;
        }
        .container {
            flex-grow: 1; 
        }
    </style>

    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
<body>
    <!-- Checkout Section Start -->
    <div class="section section-padding " style="background-color: rgb(255, 255, 255);">
        <div class="container">
            <% if (cartItems.length === 0) { %>
                <div class="checkout-empty">
                    <h2>Your cart is empty.</h2>
                    <p>Please add items to your cart before proceeding to checkout.</p>
                    <a href="/allProducts" class="btn btn-primary">Continue Shopping</a>
                </div>
            <% } else { %>

            <div class="checkout-info" id="applyCouponDiv" style="display: block;">
                <p class="info-header">
                    <i class="fa fa-exclamation-circle"></i> Have a coupon?
                    <a data-bs-toggle="collapse" href="#coupon">Click here to enter your code</a>
                </p>

                <div class="collapse" id="coupon">
                    <div class="card-body">
                        <form action="#">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="single-form">
                                        <input type="text" id="coupon-code-value" placeholder="Coupon code" pattern="[A-Z0-9]+" title="Only capital letters and numbers are allowed" oninput="this.value = this.value.toUpperCase()" />
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="single-form">
                                        <button class="btn btn-primary btn-hover-dark" onclick="applyCoupon(event)">
                                            Apply Coupon
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <p class="info-header" id="getCouponsToView">
                <i class="fa fa-exclamation-circle"></i>
                <a data-bs-toggle="collapse" href="#" id="fetchCoupons">Click here to see all available coupons</a>
            </p>

            <p class="info-header" id="removeCoupon" style="display: none;">
                <strong>Cooupon added</strong>
                <button  class="btn btn-primary btn-hover-dark" onclick="removeCoupon(event)">
                    Remove Coupon
                </button>
            </p>



            <form action="#">
                <div class="row">
                    <div class="col-lg-7">
                        <!-- Checkout Form Start -->
                        <div class="checkout-form ">
                            <div class="checkout-title">
                                <h4 >Billing & Shiping Details</h4>
                            </div>
                            <hr>
                            <div class="checkoutAddress">
                                <h4>Select Shipping Address</h4>
                                <% let i = 1 %>
                                <% addresses.forEach(address => { %>
                                    <div class="address-cards">
                                        <div class="card">
                                            <label for="address<%= i %>">
                                                <h3>üìçAddress <%= i %></h3>
                                                <h4><%= address.name %></h4>
                                                <p><%= address.address %>, <%= address.city %></p>
                                                <p><%= address.state %>, <%= address.country %></p>
                                                <p>Pin: <%= address.pincode %></p>
                                                <p>Mob: <%= address.mobile %></p>
                                            </label>
                                            <input type="radio" id="address<%= i %>" name="address" value="<%= address._id %>">
                                        </div>
                                    </div>
                                    <% i += 1 %>
                                <% }) %>
                            </div>
                            
            </form>
            <div class="single-form checkbox-checkbox">
                <input type="checkbox" id="shipping" />
                <label for="shipping">
                    <span></span> Ship to a different
                    address?</label>
            </div>


            <form action="/adding-address" method="post">

                <div class="checkout-shipping">
                    <div class="row">
                        <p id="errorMessage"></p>
                        <div class="single-form col-sm-6">
                            <input type="text" placeholder="name" name="name" id="name" required />
                        </div>
                        <p id="usernameError"></p>
                        <div class="single-form ">
                            <input type="text" placeholder="street address" name="address" id="address" required />
                        </div>
                        <p id="emailError"></p>

                        <div class="single-form">
                            <input type="text" placeholder="coutnry" name="country" id="country" required />
                        </div>
                        <div class="single-form">
                            <input type="text" placeholder="state" name="state" id="state" required />
                        </div>

                        <p id="passwordError" style="color: red;font-size: 12px;"> </p>

                        <div class="single-form">
                            <input type="text" placeholder="city" name="city" id="city" required />
                        </div>
                        <div class="single-form col-sm-6">
                            <input type="number" placeholder="pincode" name="pincode" id="pincode" required />
                        </div>
                        <div class="single-form col-sm-6">
                            <input type="number" placeholder="mobile number" name="mobile" id="mobile" required />
                        </div>
                        <div class="single-form">
                            <button class="btn btn-primary btn-hover-dark" id="buttonAdd">
                                Add New Address
                            </button>
                        </div>
                    </div>
                </div>
            </form>

        </div>
        <!-- Checkout Form End -->
    </div>
    <div class="col-lg-5">
        <div class="checkout-order rounded shadow p-4 bg-light">
            <div class="checkout-title text-center mb-4">
                <h4 class="title">Your Order</h4>
            </div>
    
            <div class="checkout-order-table table-responsive mb-4">
                <table class="table">
                    <thead class="thead-light">
                        <tr>
                            <th class="Product-name">Product</th>
                            <th class="Product-price">Total</th>
                            <th class="Product-original-price">Original Price</th>
                            <th class="Product-discount">Discount</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% let totalSaved = 0; %> 
                        <% cartItems.forEach(item => { 
                            const originalPrice = item.variantId.price; 
                            const productDiscountPrice = item.variantId.productOfferPrice || originalPrice;
                            const categoryDiscountPrice = item.variantId.categoryOfferPrice || originalPrice;
                            const bestDiscountPrice = Math.min(productDiscountPrice, categoryDiscountPrice); 
                            const discountedPrice = bestDiscountPrice * item.quantity; 
                            const savings = (originalPrice - bestDiscountPrice) * item.quantity; 
                            totalSaved += savings; 
                        %>
                            <tr>
                                <td class="Product-name">
                                    <p><%= item.variantId.productId.name %> (<%= item.size %> x <%= item.quantity %>)</p>
                                </td>
                                <td class="Product-price">
                                    <p>‚Çπ<%= discountedPrice %></p>
                                </td>
                                <td class="Product-original-price">
                                    <p class="text-muted" style="text-decoration: line-through;">‚Çπ<%= originalPrice * item.quantity %></p>
                                </td>
                                <td class="Product-discount">
                                    <p>
                                        <% if (savings > 0) { %>
                                            <span class="text-danger">Save ‚Çπ<%= savings.toFixed(2) %></span>
                                        <% } else { %>
                                            <span class="text-secondary">No discount available</span>
                                        <% } %>
                                    </p>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td class="Product-name"><strong>Subtotal</strong></td>
                            <td class="Product-price"><strong>‚Çπ<%= totalAmount %></strong></td>
                            <td class="Product-original-price" colspan="2"></td> <!-- Empty cells for alignment -->
                        </tr>
                        <!-- Coupon Discount Row -->
                        <tr id="coupon-td" style="display: none;">
                            <td class="Product-name">
                                <p id="usedCoupon"></p>
                            </td>
                            <td class="Product-price">
                                <p id="couponDiscount"></p>
                            </td>
                            <td class="Product-original-price" colspan="2"></td> <!-- Empty cells for alignment -->
                        </tr>

                        <tr>
                            <td class="Product-name"><strong>Total Saved</strong></td>
                            <td class="Product-price" ><strong id="total-saved" >‚Çπ <%= totalSaved.toFixed(2) %></strong></td>
                            <td class="Product-original-price" colspan="2"></td> <!-- Empty cells for alignment -->
                        </tr>
                        <tr>
                            <td class="Product-name"><strong>Shipping</strong></td>
                            <td class="Product-price">
                                <ul class="list-unstyled mb-0">
                                    <li class="radio">
                                        <input type="radio" name="shipping" id="radio1" checked />
                                        <label for="radio1"> Free Shipping</label>
                                    </li>
                                </ul>
                            </td>
                            <td class="Product-original-price" colspan="2"></td> <!-- Empty cells for alignment -->
                        </tr>
                        <tr>
                            <td class="Product-name"><strong>Total</strong></td>
                            <td class="total-price" id="total-price"><strong>‚Çπ<%= totalAmount %></strong></td>
                            <td class="Product-original-price" colspan="2"></td> <!-- Empty cells for alignment -->
                        </tr>
                    </tfoot>
                </table>
            </div>
    
            <h4 class="order__title">Payment Options</h4>

<div class="checkout__input__checkbox">
    <label for="cod">
        Cash on Delivery
        <input type="radio" id="cod" name="payment" value="COD" required>
        <span class="checkmark"></span>
    </label>
</div>

<div class="checkout__input__checkbox">
    <label for="razorpay">
        Razorpay
        <input type="radio" id="razorpay" name="payment" value="razor">
        <span class="checkmark"></span>
    </label>
</div>

<div class="checkout__input__checkbox">
    <label for="wallet">
        Wallet 
        <input type="radio" id="wallet" name="payment" value="Wallet">
        <span class="checkmark"></span>
    </label>
</div>

    
            <div class="single-form text-center">
                <button class="btn btn-primary btn-hover-dark w-100 mt-3" onclick="placeOrder(event)">
                    Place Order
                </button>
            </div>
        </div>
    </div>
    
    
    
    </div>
    </form>
    <% } %>
    </div>
    </body>
   
    <!-- Checkout Section End -->

    <%- include('../partials/userpartials/footer.ejs') %>

    <!-- Modal for View all available Coupons-->
    <div class="modal fade" id="couponsModal" tabindex="-1" aria-labelledby="couponsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-md">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title" id="couponsModalLabel">APPLY COUPON</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <div class="coupon-list" id="couponsBody">
                    <!-- here appending the coupon data dinanically -->
                    
                </div>
                </div>
            </div>
        </div>
    </div>
  
  
  

        <script>
            //Enabling the user to add new address
            document.getElementById('shipping').addEventListener('change', function () {
                var shippingFields = document.querySelector('.checkout-shipping');
                var shippingAddress = document.querySelector('.checkoutAddress')
                if (this.checked) {
                    shippingFields.style.display = 'block';
                    shippingAddress.style.display = "none"

                } else {
                    shippingFields.style.display = 'none';
                    shippingAddress.style.display = "block"
                }
            });


            const validateForm = () => {
                const name = document.getElementById("name").value;
                const country1 = document.getElementById("country").value;
                const address = document.getElementById("address").value;
                const city = document.getElementById("city").value;
                const state = document.getElementById("state").value;
                const pincode = document.getElementById("pincode").value;
                const mobile = document.getElementById("mobile").value;


                // Regex patterns for validation
                const nameRegex = /^[A-Za-z ]+$/; // Only letters and spaces
                const countryRegex = /^[A-Za-z ]+$/; // Only letters and spaces
                const addressRegex = /^[0-9A-Za-z .,/-]+$/; // Alphanumeric with specific characters
                const cityRegex = /^[A-Za-z ]+$/; // Only letters and spaces
                const stateRegex = /^[A-Za-z ]+$/; // Only letters and spaces
                const pincodeRegex = /^\d{6}$/; //digit numeric pincode
                const mobileRegex = /^\d{10}$/; // Ten-digit numeric mobile number


                // Validating each field 
                const isValidName = nameRegex.test(name);
                const isValidCountry = countryRegex.test(country1);
                const isValidAddress = addressRegex.test(address);
                const isValidCity = cityRegex.test(city);
                const isValidState = cityRegex.test(state);
                const isValidPincode = pincodeRegex.test(pincode);
                const isValidMobile = mobileRegex.test(mobile);

                const sweetAlert = (Something) => {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: `Please enter a valid ${Something} (letters and spaces only!`,
                    });
                };

                if (!isValidName || !name) {
                    sweetAlert("NAME");
                    return false;
                }
                if (!isValidAddress) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Please enter a valid address!",
                    });
                    return false;
                }
                if (!isValidCountry || !country) {
                    sweetAlert("COUNTRY");
                    return false;
                }

                if (!isValidCity) {
                    sweetAlert("CITY");
                    return false;
                }
                if (!isValidState) {
                    sweetAlert("STATE");
                    return false;
                }
                if (!isValidPincode) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Please enter a valid PINCODE (exactly SIX digits)!",
                    });
                    return false;
                }
                if (!isValidMobile) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Please enter a valid MOBILE NUMBER (exactly TEN digits)!",
                    });
                    return false;
                }

                return true;
            };

            const form = document.getElementById("Form");
            const button = document.getElementById("buttonAdd");
            button.addEventListener("click", (event) => {

                const state = validateForm();
                if (state == true) {
                    form.submit();
                } else {
                    event.preventDefault();
                }
            });



            <!-- ! PLACE ORDER  -->
            function placeOrder(event) {
                event.preventDefault();
                const selectedAddress = document.querySelector('input[name="address"]:checked');
                const selectedPayment = document.querySelector('input[name="payment"]:checked').value;

            
                if (!selectedAddress) {
                    Toastify({
                        text: "Please select an address!",
                        duration: 3000,
                        close: true,
                        gravity: "top", 
                        position: "right", 
                        backgroundColor: "linear-gradient(to right, #FF0000, #FF6347)",
                        stopOnFocus: true,
                    }).showToast();
                    return;
                }
                if (!selectedPayment) {
                    Toastify({
                        text: "Please select a payment!",
                        duration: 3000,
                        close: true,
                        gravity: "top", 
                        position: "right", 
                        backgroundColor: "linear-gradient(to right, #FF0000, #FF6347)",
                        stopOnFocus: true,
                    }).showToast();
                    return;
                }
            
                console.log(selectedAddress.value);
            
                fetch('/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ addressId: selectedAddress.value , paymentMethod: selectedPayment}),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Ordered by COD') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message,
                            showConfirmButton: true,
                        }).then(() => {
                            window.location.href = `/order-summary?orderId=${data.orderId}`; 
                        });
                    }else if(data.message === "Ordered by Razor"){
                        const options = {
                            key: data.key,
                            amount: data.amount * 100,
                            name: 'Coza store',
                            order_id: data.razorpayOrderId,
                            handler: function (response) {
                                fetch('/confirm-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        orderId: data.orderId,
                                        razorpayPaymentId: response.razorpay_payment_id,
                                        razorpayOrderId: response.razorpay_order_id,
                                        razorpaySignature: response.razorpay_signature
                                    })
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok')
                                        }
                                        return response.json()
                                    })
                                    .then(data => {
                                        if (data.message === 'Success') {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Order Confirmed!',
                                                text: 'Your order has been successfully placed.',
                                                confirmButtonText: 'OK'
                                            })
                                                .then(() => {
                                                    console.log('Order Confirmed');
                                                    window.location.href = `/order-summary?orderId=${data.orderId}`;
                                                });
                                        } else if (data.message === 'Payment not confirmed') {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment not confirmed!',
                                                text: 'Payment not confirmed. Please contact support.',
                                                confirmButtonText: 'OK'
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment Failed!',
                                                text: 'Your payment was successful but order placement failed. Please contact support.',
                                                confirmButtonText: 'OK'
                                            });
        
                                        }
                                    })
                                    .catch(error => {
                                        console.log(error)
                                    })
        
                            },
                            prefill: {
                                name: 'Ameen Hyder',
                                email: 'email@email.com',
                                contact: '9867876598'
                            },
                            theme: {
                                color: "#3399cc"
                            }
                        }
                        const rzpl = new Razorpay(options);
                        
                        rzpl.on("payment.failed", function (response){
                            console.error(response.error);
                            Swal.fire({
                                icon: "error",
                                title: "Payment Failed",
                                text: "Redirecting to Home page"
                            }).then(() => {
                                window.location.href = "/"
                            })
                        })
                        rzpl.open();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message,
                            showConfirmButton: true,
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while placing the order. Please try again later.',
                        showConfirmButton: true,
                    });
                });
            }
            

             // Function to fetch the coupon and show it in the modal
             document.getElementById('fetchCoupons').addEventListener('click', async (e) => {
                e.preventDefault();
              
                try {
                  const response = await fetch('/coupons/all', {
                    method: 'GET',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                  });
              
                  const coupons = await response.json();
                  const couponsBody = document.getElementById('couponsBody');
                  couponsBody.innerHTML = '';
              
                  if (coupons.length > 0) {
                    coupons.forEach((coupon) => {
                      const couponElement = `
                        <div class="coupon-card" style="padding: 10px; border-bottom: 1px solid #ddd; margin-bottom: 10px;">
                          <h5 style="margin-bottom: 5px;">${coupon.name}</h5>
                          <p style="margin: 0;"><strong>Save: ‚Çπ${coupon.amount} off </strong></p>
                          <p style="margin: 0;">FLAT-RS. ‚Çπ ${coupon.amount} off on minimum purchase of Rs.${coupon.minimumAmount}</p>
                          <p style="margin: 0 0 5px;">Expires on: ${new Date(coupon.expires).toLocaleDateString()} 11:59 PM</p>
                          <div class="coupon-code">
                            <span class="coupon-base-labelChecked" style="cursor: pointer;" id="couponCode-${coupon.couponCode}" data-code="${coupon.couponCode}">
                              ${coupon.couponCode}
                            </span>
                            <small style="margin-left: 10px;">(Click to copy)</small>
                          </div>
                        </div>
                      `;
                      couponsBody.innerHTML += couponElement;
                    });
              
                    // FOR COPYING THE CODE
                    document.querySelectorAll('.coupon-base-labelChecked').forEach((label) => {
                      label.addEventListener('click', (e) => {
                        const couponCode = e.target.getAttribute('data-code');
                        copyToClipboard(couponCode);
                      });
                    });
                  } else {
                    couponsBody.innerHTML = '<p>No coupons available at the moment.</p>';
                  }
              
                  const couponsModal = new bootstrap.Modal(document.getElementById('couponsModal'));
                  couponsModal.show();
                } catch (error) {
                  console.error('Error fetching coupons:', error);
                }
              });
              
              // FUNCTION TO ADD THE COPIED DATA TO THE CLIPBOARD
              function copyToClipboard(text) {
                navigator.clipboard.writeText(text)
                  .then(() => {
                    // Close the modal first
                    const couponsModal = bootstrap.Modal.getInstance(document.getElementById('couponsModal'));
                    couponsModal.hide();
              
                    Toastify({
                        text: `Coupon code ${text} copied!`,
                        duration: 1500, 
                        gravity: 'top',
                        position: 'right', 
                        backgroundColor: 'green', 
                        stopOnFocus: true, 
                      }).showToast();
                    })
                    .catch((err) => {
                      console.error('Failed to copy text: ', err);
                
                      // Show error Toastify notification
                      Toastify({
                        text: 'Failed to copy coupon code. Please try again.',
                        duration: 2000,
                        close: true,
                        gravity: 'top',
                        position: 'right',
                        backgroundColor: 'red',
                        stopOnFocus: true,
                      }).showToast();
                    });
              }
            
              // APPLYING COUPON
              function applyCoupon(event) {
                event.preventDefault();
                
                const couponCode = document.getElementById("coupon-code-value").value;
                console.log(couponCode)
                
                if (couponCode) {
                    fetch("/coupon/apply", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ couponCode }), 
                    })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            Toastify({
                                text: `Coupon code ${couponCode} applied! You saved ‚Çπ${data.discountAmount}`,
                                duration: 3000, 
                                close: true,
                                gravity: 'top',
                                position: 'right', 
                                backgroundColor: 'green', 
                                stopOnFocus: true,
                            }).showToast();
                            
                            // Update the total price
                            document.getElementById('total-price').textContent = `‚Çπ${data.newTotal}`;

                            // Update the total saved amount by adding the discount amount
                            const totalSavedElement = document.getElementById('total-saved');
                            const currentTotalSaved = parseFloat(totalSavedElement.textContent.replace('‚Çπ', '')) || 0;
                            const newTotalSaved = currentTotalSaved + data.discountAmount;

                            // Set the new total saved value
                            totalSavedElement.textContent = `‚Çπ${newTotalSaved.toFixed(2)}`;

                            // Set the coupon code and discount amount in the respective paragraphs
                            document.getElementById('usedCoupon').textContent = `Coupon Applied: ${data.couponCode}`;
                            document.getElementById('couponDiscount').textContent = `Discount: ‚Çπ${data.discountAmount}`;

                            // Hide the coupon input and get coupons buttons
                            document.getElementById('applyCouponDiv').style.display = 'none';
                            document.getElementById('getCouponsToView').style.display = 'none';

                            // Show the remove coupon button
                            document.getElementById('removeCoupon').style.display = 'block';

                            // Show the coupon-td element
                            document.getElementById('coupon-td').style.display = 'table-row';
                        } else {
                            // Show error message if the coupon is invalid
                            Toastify({
                                text: data.message || 'Invalid coupon code. Please try again.',
                                duration: 3000, 
                                close: true,
                                gravity: 'top',
                                position: 'right', 
                                backgroundColor: 'red', 
                                stopOnFocus: true,
                            }).showToast();
                        }
                    })
                    .catch((error) => {
                        // Show error if there's a problem with the request
                        console.error('Error applying coupon:', error);
                        Toastify({
                            text: 'Error applying coupon. Please try again later.',
                            duration: 3000, 
                            close: true,
                            gravity: 'top',
                            position: 'right', 
                            backgroundColor: 'red', 
                            stopOnFocus: true,
                        }).showToast();
                    });
                } else {
                    // Show a notification if the coupon code input is empty
                    Toastify({
                        text: 'Enter coupon code',
                        duration: 1500, 
                        close: true,
                        gravity: 'top',
                        position: 'right', 
                        backgroundColor: 'orange', 
                        stopOnFocus: true,
                    }).showToast();
                }
            }
  
              
            function removeCoupon(event) {
                event.preventDefault();
                
                fetch("/coupon/remove", { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Toastify({
                            text: `Coupon removed successfully!`,
                            duration: 3000, 
                            close: true,
                            gravity: 'top',
                            position: 'right', 
                            backgroundColor: 'red', 
                            stopOnFocus: true,
                        }).showToast();
                        
                        document.getElementById('total-price').textContent = `‚Çπ${data.originalTotal}`;
                        
                        // Clear coupon code and discount information
                        document.getElementById('usedCoupon').textContent = '';
                        document.getElementById('couponDiscount').textContent = ''; 
            
                        const totalSavedElement = document.getElementById('total-saved'); // The total saved field
                        let currentTotalSaved = parseFloat(totalSavedElement.textContent.replace(/[‚Çπ,]/g, '')) || 0;
            
                        let discountAmount = Number(data.discountAmount) || 0; // Ensure discountAmount is a number
                        const newTotalSaved = currentTotalSaved - discountAmount;
            
                        totalSavedElement.textContent = `‚Çπ${newTotalSaved.toFixed(2)}`;
            
                        document.getElementById('applyCouponDiv').style.display = 'block';
                        document.getElementById('getCouponsToView').style.display = 'block';
                        document.getElementById('removeCoupon').style.display = 'none';
                        document.getElementById('coupon-td').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error removing coupon:', error);
                    Toastify({
                        text: `Failed to remove coupon. Please try again.`,
                        duration: 3000, 
                        close: true,
                        gravity: 'top',
                        position: 'right', 
                        backgroundColor: 'orange', 
                        stopOnFocus: true,
                    }).showToast();
                });
            }
            
            
              
              
              
              
        </script>

        <!-- SWEET ALERT LINK -->

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--   For linking the razor pay     -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

        <!-- Modernizer & jQuery JS -->
        <script src="/assets/js/vendor/modernizr-3.11.2.min.js"></script>
        <script src="/assets/js/vendor/jquery-3.5.1.min.js"></script>