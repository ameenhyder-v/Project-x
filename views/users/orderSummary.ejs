<%- include("../partials/userpartials/header.ejs") %>

<style>
    .invoice-button-wrapper {
        text-align: right;
        margin: 1rem; /* 16px converted to 1rem */

    }
    
    .invoice-button {
        padding: 0.5rem 1rem;
        background-color: #d0c4da;
        color: white;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 0.875rem; 
        transition: background-color 0.3s ease;
    }
    
    .invoice-button:hover {
        background-color: #917aa4;
    }
    
    @media (max-width: 768px) {
        .invoice-button-wrapper {
            text-align: center;
        }
        
        .invoice-button {
            font-size: 0.8125rem; 
            padding: 0.4375rem 0.875rem; 
        }
    }

    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        padding-top: 4rem;
    }
    .container {
        flex-grow: 1; 
    }


    .modal {
        display: none; 
        position: fixed;
        z-index: 1000; 
        left: 0;
        top: 0;
        width: 100%;
        height: 100%; 
        overflow: auto; 
        background-color: rgb(0, 0, 0); 
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; 
        padding: 20px;
        border: 1px solid #888;
        width: 80%; 
        text-align: center;
    }

    .loader {
        border: 16px solid #e9e0e5; 
        border-top: 16px solid #895c72;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        animation: spin 2s linear infinite;
        margin: 20px auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<body>
    
<div class="container my-5">
    <div class="card">
        <div class="card-header">
            <h1>Order Details for Order #<%= order.orderId %></h1>
        </div>
        <div class="card-body">
            <h4 class="card-title">Items</h4>
            <% if (order.orderStatus === "Placed" || order.orderStatus === "Delivered") { %>
                <div class="invoice-button-wrapper">
                    <button class="invoice-button" onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
                </div>
            <% } %>            

            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>Photo</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% order.orderedItems.forEach(item => { %>
                            <tr>
                                <td>
                                    <% if (item.variantId && item.variantId.image && item.variantId.image[0]) { %>
                                        <img src="/images/<%= item.variantId.image[0] %>" alt="photo" width="100">
                                    <% } %>
                                </td>
                                <td><%= item.product_name %></td>
                                <td>₹ <%= item.price %></td>
                                <td><%= item.quantity %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>

            <h4 class="card-title mt-4">Billing Information</h4>
            <p><strong>Name:</strong> <%= order.shippingAddress.name %></p>
            <p><strong>Email:</strong> <%= user.email %></p>
            <p><strong>Address:</strong> <%= order.shippingAddress.address %>, <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.country %> - <%= order.shippingAddress.pincode %></p>
            <p><strong>Mobile:</strong> <%= order.shippingAddress.mobile %></p>
            <p><strong>Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
            <p class="text-danger"><strong class="text-dark">Status:</strong> <%= order.orderStatus %></p>
            <p ><strong class="text-dark">Payment:</strong> <%= order.paymentStatus %></p>
            <% if(order.couponDiscount > 0) {%>
                <p ><strong class="text-dark">Coupon discount:</strong> <%= order.couponDiscount %></p>
            <% } %>

            <p><strong>Total:</strong> ₹<%= order.totalAmount %></p>



            <%if (order.orderStatus == 'Pending' && order.paymentMethod == 'razor' && order.paymentStatus == "Pending") { %>
                <aside>
                    <button type="button"  class="btn btn-secondary" onclick="continuePayment('<%= order._id %>', event)">
                        <i class="fas fa-undo"></i> Continue payment
                    </button>
                </aside>
            <% } else if (order.orderStatus == 'canceled') { %>
                <p class="text-danger">The order is canceled</p>
                <a href="/my-orders" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            <% } else if (order.orderStatus == 'Delivered') { %>
                <aside>
                    <button type="button" onclick="returnOrder('<%= order._id %>')" class="btn btn-secondary">
                        <i class="fas fa-undo"></i> Return Order
                    </button>
                </aside>
            <% } else if (order.orderStatus == 'Pending' || order.orderStatus == 'Placed' ) { %>
                <div class="d-flex justify-content-between align-items-center">
                    <button type="submit" onclick="cancelOrder('<%= order._id %>')" class="btn btn-danger">Cancel Order</button>
                </div>
            <% } else if(order.orderStatus == 'returned') { %>
                <p class="text-danger">The order is Returned</p>
                <a href="/my-orders" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            <% } else if (order.orderStatus == 'cannot return') { %>
                <p class="text-danger">This order cannot return</p>
                <a href="/my-orders" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            <% } %>
        </div>
    </div>
</div>
<%- include("../partials/userpartials/footer.ejs") %> <!-- Correct placement -->


<!-- Loading Modal -->
<div id="loadingModal" class="modal">
    <div class="modal-content">
        <h2>Generating Invoice...</h2>
        <div class="loader"></div> <!-- Loading Animation -->
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--   For linking the razor pay     -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
    function cancelOrder(orderId) {
        Swal.fire({
            title: "Do you want to cancel the order?",
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Select the reason for cancellation',
                    input: 'select',
                    inputOptions: {
                        'Delayed shipping': 'Delayed shipping',
                        'Ordered by mistake': 'Ordered by mistake',
                        'Found a better price': 'Found a better price',
                        'Product not needed anymore': 'Product not needed anymore',
                        'Other': 'Other'
                    },
                    inputPlaceholder: 'Choose a reason',
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel'
                }).then((reasonResult) => {
                    if (reasonResult.isConfirmed) {
                        if (!reasonResult.value) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Cancellation reason is required',
                                text: 'Please select a reason for cancellation.',
                                confirmButtonText: 'OK'
                            });
                        } else {
                            const cancelReason = reasonResult.value;
                            
                            axios.post(`/cancelOrder?orderId=${orderId}`, {
                                reason: cancelReason
                            })
                            .then((response) => {
                                if (response.data.success == 1) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Canceled',
                                        confirmButtonText: 'OK'
                                    })
                                    .then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.reload()
                                        }
                                    });
                                } else if (response.data.cancel) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Amount added to the Wallet',
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.reload()
                                        }
                                    });
                                }
                            })
                            .catch((error) => {
                                console.log(error);
                            });
                        }
                    }
                });
            } else if (result.isDenied) {
                Swal.fire("Changes are not saved", "", "info");
            }
        });
    }
    
    

    function returnOrder(orderId) {
        Swal.fire({
            icon: 'question',
            title: 'Return the order?',
            text: 'Are you sure you want to return the order?',
            showCancelButton: true,
            confirmButtonText: 'Yes',
        }).then(result => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Reason for Return',
                    input: 'textarea',
                    inputPlaceholder: 'Enter your reason for returning the order...',
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    preConfirm: (reason) => {
                        if (!reason) {
                            Swal.showValidationMessage('Please enter a reason for returning the order');
                            return false; // Prevents proceeding if validation fails
                        }
                        return reason;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const reason = result.value;
                        const submitButton = document.querySelector('.swal2-confirm');
                        submitButton.disabled = true; // Disable the button to prevent multiple submissions
    
                        fetch(`/returnOrder?`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ orderId: orderId, reason: reason })
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not okay');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Request sent successfully',
                                    text: 'Your return request has been sent successfully. The order will be returned after admin acceptance.',
                                    confirmButtonText: 'OK'
                                }).then(response => {
                                    if (response.isConfirmed) {
                                        window.location.href = `/order-summary?orderId=${orderId}`;
                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Return Request Failed',
                                    text: data.message || 'Something went wrong! Please try again later.',
                                });
                            }
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Something went wrong! Please try again later.',
                            });
                            console.log(error);
                        })
                        .finally(() => {
                            submitButton.disabled = false; // Re-enable the button after request completes
                        });
                    }
                });
            }
        });
    }


    function continuePayment(orderId, event){
        event.preventDefault()
        fetch(`/retry-payment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId: orderId})
        }).then(response => response.json())
        .then(data => {
            if(data.message === "Ordered by Razor"){
                const options = {
                    key: data.key,
                    amount: data.amount * 100,
                    name: 'Coza store',
                    order_id: data.razorpayOrderId,
                    handler: function (response) {
                        fetch('/confirm-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId: data.orderId,
                                razorpayPaymentId: response.razorpay_payment_id,
                                razorpayOrderId: response.razorpay_order_id,
                                razorpaySignature: response.razorpay_signature
                            })
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok')
                                }
                                return response.json()
                            })
                            .then(data => {
                                if (data.message === 'Success') {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Confirmed!',
                                        text: 'Your order has been successfully placed.',
                                        confirmButtonText: 'OK'
                                    })
                                        .then(() => {
                                            console.log('Order Confirmed');
                                            window.location.href = `/order-summary?orderId=${data.orderId}`;
                                        });
                                } else if (data.message === 'Payment not confirmed') {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment not confirmed!',
                                        text: 'Payment not confirmed. Please contact support.',
                                        confirmButtonText: 'OK'
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed!',
                                        text: 'Your payment was successful but order placement failed. Please contact support.',
                                        confirmButtonText: 'OK'
                                    });

                                }
                            })
                            .catch(error => {
                                console.log(error)
                            })

                    },
                    prefill: {
                        name: 'Ameen Hyder',
                        email: 'email@email.com',
                        contact: '9867876598'
                    },
                    theme: {
                        color: "#3399cc"
                    }
                }
                const rzpl = new Razorpay(options);
                
                rzpl.on("payment.failed", function (response){
                    console.error(response.error);
                    Swal.fire({
                        icon: "error",
                        title: "Payment Failed",
                        text: "Redirecting to Home page"
                    }).then(() => {
                        window.location.href = "/"
                    })
                })
                rzpl.open();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message,
                    showConfirmButton: true,
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while placing the order. Please try again later.',
                showConfirmButton: true,
            });
        });
    }
    

    function downloadInvoice(orderId) {
        const loadingModal = document.getElementById('loadingModal');
        loadingModal.style.display = 'block'; // Show the loading modal
    
        fetch(`/order/invoice/download?orderId=${orderId}`, {
            method: 'GET',
        })
        .then(response => {
            console.log('Response:', response);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.blob();
        })
        .then(blob => {
            console.log('Blob:', blob);
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `invoice_${orderId}.pdf`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        })
        .finally(() => {
            loadingModal.style.display = 'none';
        });
    }
</script>

